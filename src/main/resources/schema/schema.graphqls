interface Node {
	id: ID!
}

type Price {
	formatted: String
	raw: Float
}

input Transformation {
	crop: String
	height: Int
	width: Int
}

"""
https://cloudinary.com/documentation/resizing_and_cropping#resize_and_crop_modes
"""
enum Crop {
	"""
	Extracts a region of the specified dimensions from the original image without first resizing it.
	"""
	CROP
	"""
	Resizes the image to fill the specified dimensions without distortion. The image may be cropped as a result.
	"""
	FILL
	"""
	Same as fill, but avoids excessive cropping by adding padding when needed. Supported only with automatic cropping.
	"""
	FILL_PAD
	"""
	Resizes the image to fit inside the bounding box specified by the dimensions, maintaining the aspect ratio.
	"""
	FIT
	"""
	Performs smart cropping, using the Imagga Crop and Scale add-on.
	"""
	IMAGGA_CROP
	"""
	Performs smart scaling, using the Imagga Crop and Scale add-on.
	"""
	IMAGGA_SCALE
	"""
	Same as fill, but only scales down the image.
	"""
	LFILL
	"""
	Same as fit, but only scales down the image.
	"""
	LIMIT
	"""
	Same as pad, but only scales down the image.
	"""
	LPAD
	"""
	Same as fit, but only scales up the image.
	"""
	MFIT
	"""
	Same as pad, but only scales up the image.
	"""
	MPAD
	"""
	Resizes the image to fit inside the bounding box specified by the dimensions, maintaining the aspect ratio, and applies padding if the resized image does not fill the whole area.
	"""
	PAD
	"""
	Resizes the image to the specified dimensions without necessarily retaining the original aspect ratio.
	"""
	SCALE
	"""
	Creates a thumbnail of the image with the specified dimensions, based on a specified gravity. Scaling may occur.
	"""
	THUMB
}

type BookConnection {
	edges: [BookEdge]
	pageInfo: PageInfo!
}
type BookEdge {
	cursor: String
	node: Book
}

type Cover {
	crop: Crop
	height: Int
	url: String
	width: Int
}
type Book implements Node {
	author: String
	# eslint-disable-next-line @graphql-eslint/relay-edge-types
	covers(transformations: [Transformation]): [Cover]
	databaseId: UUID
	id: ID!
	popularity: Int
	price: Price
	recommended(after: String, before: String, first: Int, last: Int): BookConnection
	releasedAt: DateTime
	synopsis: String
	title: String
}

interface Viewer implements Node {
	id: ID!
}

type User implements Viewer & Node {
	databaseId: UUID
	id: ID!
	name: String
	purchases(after: String, before: String, first: Int, last: Int): PurchaseConnection
}

type Admin implements Viewer & Node {
	id: ID!
}

enum PurchaseStatus {
	AWAITING_PAYMENT
	COMPLETE
}

scalar DateTime
scalar UUID

type PurchaseConnection {
	edges: [PurchaseEdge]
	pageInfo: PageInfo!
}

type PageInfo {
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
}

type PurchaseEdge {
	cursor: String
	node: Purchase
}
type Purchase implements Node {
	books(after: String, before: String, first: Int, last: Int): PurchaseBooksConnection
	createdAt: DateTime
	id: ID!
	price: Price
	status: PurchaseStatus
	user: User
}

type PurchaseBooksEdge {
	cursor: String
	node: Book
	price: Price
	quantity: Int
}

type PurchaseBooksConnection {
	edges: [PurchaseBooksEdge]
	pageInfo: PageInfo!
}

type BasketBooksEdge {
	cursor: String
	node: Book
	price: Price
	quantity: Int
}

type BasketBooksConnection {
	edges: [BasketBooksEdge]
	pageInfo: PageInfo!
}

type Basket {
	books(after: String, before: String, first: Int, last: Int): BasketBooksConnection
	id: ID!
	price: Price
	quantity: Int
}

enum Order {
	ASC
	DESC
}

input PriceOrderBy {
	raw: Order
}

input BookOrderBy {
	popularity: Order
	price: PriceOrderBy
	releasedAt: Order
}

type Query {
	"""
	3.5
	"""
	basket(id: ID): Basket
	"""
	3
	"""
	books(
		after: String
		before: String
		first: Int
		last: Int
		orderBy: [BookOrderBy]
	): BookConnection
	"""
	3
	"""
	hello: String
	"""
	3
	"""
	node(id: ID!): Node
	"""
	4
	"""
	purchases(after: String, before: String, first: Int, last: Int): PurchaseConnection
	"""
	3
	"""
	viewer: Viewer
}

input UpdateStatusInput {
	iD: ID!
	status: PurchaseStatus!
}

type MakePurchaseResult {
	basket: Basket
	purchase: Purchase
}

scalar Upload

input CreatePriceInput {
	raw: Float!
}

input CreateCoverInput {
	file: Upload
	url: String
}
input CreateBookInput {
	author: String!
	cover: CreateCoverInput!
	databaseId: UUID!
	price: CreatePriceInput!
	releasedAt: DateTime!
	title: String!
}

type BasketBookResult {
	basket: Basket
}

type UnbasketBookResult {
	basket: Basket
}

type UpdateStatusResult {
	purchase: Purchase
}

input WhereUniqueBasketInput {
	id: ID!
}

input WhereUniqueBookInput {
	id: ID!
}

input BasketBookInput {
	basket: WhereUniqueBasketInput
	book: WhereUniqueBookInput!
}

input UnbasketBookInput {
	basket: WhereUniqueBasketInput
	book: WhereUniqueBookInput!
}

input DeleteInput {
	id: ID!
}

type CreateBookResult {
	book: Book
}

type DeleteResult {
	node: Node
}

input MakePurchaseInput {
	basket: WhereUniqueBasketInput!
}

type Mutation {
	"""
	3.5 requires role User
	"""
	basketBook(input: BasketBookInput!): BasketBookResult
	"""
	3 requires role Admin
	"""
	createBook(input: CreateBookInput!): CreateBookResult

	"""
	3 requires role Admin
	"""
	delete(input: DeleteInput!): DeleteResult
	"""
	3
	"""
	login(input: LoginInput!): LoginResult

	"""
	4 requires role User
	"""
	makePurchase(input: MakePurchaseInput!): MakePurchaseResult
	"""
	3
	"""
	register(input: RegisterInput!): RegisterResult
	"""
	3.5 requires role User
	"""
	unbasketBook(input: UnbasketBookInput!): UnbasketBookResult
	"""
	4 requires role Admin
	"""
	updateStatus(input: UpdateStatusInput!): UpdateStatusResult
}

type LoginSuccess {
	token: String
}

type LoginError {
	username: String
}

union LoginResult = LoginSuccess | LoginError

type RegisterSuccess {
	token: String
}

type RegisterError {
	username: String
}

union RegisterResult = RegisterSuccess | RegisterError

input LoginInput {
	password: String!
	username: String!
}

input RegisterInput {
	databaseId: UUID!
	password: String!
	username: String!
}

schema {
	query: Query
	mutation: Mutation
}
