interface Node {
	id: ID!
}

type Cover {
	url: String
	width: Int
	height: Int
}

type Book implements Node @connection {
	id: ID!
	cover: Cover
	title: String
	author: String
	price: String
	popularity: Int
	releasedAt: DateTime
}

union Viewer = User | Admin

type User implements Node {
	id: ID!
	orders(first: Int, after: String, last: Int, before: String): OrderConnection
}

type Admin implements Node {
	id: ID!
}

enum OrderStatus {
	PENDING
	COMPLETE
}

scalar DateTime

type Order implements Node @connection {
	id: ID!
	totalPrice: String
	status: OrderStatus
	createdAt: DateTime
	user: User
	books(first: Int, after: String, last: Int, before: String): BookConnection
}

type Basket {
	totalPrice: String
	books(first: Int, after: String, last: Int, before: String): BookConnection
}

enum Sort {
	DESC
	ASC
}

input BookSortBy {
	price: Sort
	popularity: Sort
	releasedAt: Sort
}

type Query {
	#    3
	hello: String
	node(id: ID!): Node
	books(first: Int, after: String, last: Int, before: String, sortBy: [BookSortBy]): BookConnection
	viewer: Viewer
	#    3.5
	basket: Basket
	# 4
	orders(first: Int, after: String, last: Int, before: String): OrderConnection
}

input UpdateStatusInput {
	iD: ID!
	status: OrderStatus
}

type CreateOrderResult {
	basket: Basket
	order: Order
}

scalar Upload

input CreateBookInput {
	title: String
	author: String
	price: Int
	cover: Upload
	releasedAt: DateTime
}

type Mutation {
	#    3
	"""
	requires role Admin
	"""
	createBook(input: CreateBookInput!): Book
	"""
	requires role Admin
	"""
	delete(id: ID!): Node
	#    3.5
	"""
	requires role User
	"""
	basketBook(id: ID!): Basket
	"""
	requires role User
	"""
	unbasketBook(id: ID!): Basket
	#    4
	"""
	requires role User
	"""
	makeOrder: CreateOrderResult
	"""
	requires role Admin
	"""
	updateStatus(input: UpdateStatusInput!): Order
}
