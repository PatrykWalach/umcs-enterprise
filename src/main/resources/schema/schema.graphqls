interface Node {
	id: ID!
}

type Cover implements Node {
	height: Int
	id: ID!
	url: String
	width: Int
}
type BookConnection {
	edges: [BookEdge]
	pageInfo: PageInfo!
}
type BookEdge {
	cursor: String
	node: Book
}
type Book implements Node {
	author: String
	cover: Cover
	id: ID!
	popularity: Int
	price: String
	recommended(after: String, before: String, first: Int, last: Int): BookConnection
	releasedAt: DateTime
	synopsis: String
	title: String
}

union Viewer = User | Admin

type User implements Node {
	id: ID!
	orders(after: String, before: String, first: Int, last: Int): OrderConnection
}

type Admin implements Node {
	id: ID!
}

enum OrderStatus {
	COMPLETE
	PENDING
}

scalar DateTime
type OrderConnection {
	edges: [OrderEdge]
	pageInfo: PageInfo!
}

type PageInfo {
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
}

type OrderEdge {
	cursor: String
	node: Order
}
type Order implements Node {
	books(after: String, before: String, first: Int, last: Int): BookConnection
	createdAt: DateTime
	id: ID!
	status: OrderStatus
	totalPrice: String
	user: User
}

type BasketBooksEdge {
	cursor: String
	node: Book
	quantity: Int
}

type BasketBooksConnection {
	edges: [BasketBooksEdge]
	pageInfo: PageInfo!
}

type Basket {
	books(after: String, before: String, first: Int, last: Int): BasketBooksConnection
	totalPrice: String
}

enum Sort {
	ASC
	DESC
}

input BookSortBy {
	popularity: Sort
	price: Sort
	releasedAt: Sort
}

type Query {
	"""
	3.5
	"""
	basket: Basket
	"""
	3
	"""
	books(after: String, before: String, first: Int, last: Int, sortBy: [BookSortBy]): BookConnection
	"""
	3
	"""
	hello: String
	"""
	3
	"""
	node(id: ID!): Node
	"""
	4
	"""
	orders(after: String, before: String, first: Int, last: Int): OrderConnection
	"""
	3
	"""
	viewer: Viewer
}

input UpdateStatusInput {
	iD: ID!
	status: OrderStatus
}

type MakeOrderResult {
	basket: Basket
	order: Order
}

scalar Upload

input CreateBookInput {
	author: String
	cover: Upload
	price: Float
	releasedAt: DateTime
	title: String
}

type BasketBookResult {
	basket: Basket
}

type UnbasketBookResult {
	basket: Basket
}

type UpdateStatusResult {
	order: Order
}
input BasketBookInput {
	id: ID!
}

input UnbasketBookInput {
	id: ID!
}

type Mutation {
	"""
	3.5 requires role User
	"""
	basketBook(input: BasketBookInput): BasketBookResult
	"""
	3 requires role Admin
	"""
	createBook(input: CreateBookInput!): Book
	"""
	3 requires role Admin
	"""
	delete(id: ID!): Node
	"""
	4 requires role User
	"""
	makeOrder: MakeOrderResult
	"""
	3.5 requires role User
	"""
	unbasketBook(input: UnbasketBookInput): UnbasketBookResult
	"""
	4 requires role Admin
	"""
	updateStatus(input: UpdateStatusInput!): UpdateStatusResult
}

schema {
	query: Query
	mutation: Mutation
}
